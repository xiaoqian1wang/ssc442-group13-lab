install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggmap")
install.packages("mapdata")
install.packages("wordcloud")
install.packages("ggrepel")
tes <- c(Albania, Armenia, Belarus, Bosnia and Herzegovina, Georgia, Kosovo, Macedonia, Moldova, Montenegro, Serbia, Ukraine, Bulgaria, Croatia, Czech Republic, Estonia, Hungary, Latvia, Lithuania, Poland, Romania, Slovak Republic, Slovenia, Russia, Kazakhstan, Kyrgyzstan, Tajikistan, Turkmenistan, Uzbekistan, Cambodia, China, Laos, Vietnam, Botswana.)
fsu <- c(Russia, Ukraine, Belarus, Uzbekistan, Kazakhstan, Georgia, Azerbaijan, Lithuania, Moldova, Latvia, Kyrgyzstan, Tajikistan, Armenia, Turkmenistan, Estonia)
library(tidyverse)
install.packages("gapminder")
library(tidyverse)
library(gapminder)
gapminder
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
p
gapminder <- gapminder
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
p
p <- ggplot(data = gapminder,
aes(x = gdpPercap, y = lifeExp))
p
library(tidyverse)
library(ggplot2)
library(gapminder)
gapminder <- gapminder
p <- ggplot(data = gapminder,
aes(x = gdpPercap, y = lifeExp))
p
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
p
names(gapminder)
gapminder <- gapminder
gapminder
p <- ggplot(data = gapminder,
mapping = aes(x=gdpPercap, y =lifeExp))
p
gapminder
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap, y = lifeExp))
p
library(mpg)
mpgdata <- mpg
mpgdata
mpgdata <- mpg
plot_1 <- ggplot(data=mpgdata, mapping = aes(x=displ, y=hwy)) +
geom_point()
plot_1
plot_2 <- ggplot(data=mpgdata, mapping = aes(x=class, y=drv)) +
geom_point()
plot_2
plot_1
plot_1 <- ggplot(data=mpgdata, mapping = aes(x=displ, y=hwy)) +
geom_point()+
geom_smooth(method = lm, color='red', se=FALSE)
plot_1
plot_2 <- ggplot(data=mpgdata, mapping = aes(x=class, y=drv)) +
geom_point()+
geom_smooth(method = lm, color='green', se=FALSE)
plot_2
plot_2 <- ggplot(data=mpgdata, mapping = aes(x=class, y=drv)) +
geom_point()+
geom_smooth(method = lm, color='red', se=FALSE)
plot_2
plot_2 <- ggplot(data=mpgdata, mapping = aes(x=class, y=drv)) +
geom_point()+
geom_smooth(method = lm, color='red', se=FALSE)
plot_2
library(tidyverse)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(tidyverse)
library(maps)
library(mapdata)
library(ggplot2)
usa <- map_data('usa')
usa
state <- map_data('state')
state
state <- map_data('state')
mi <- c('michigan')
regional <- subset(state, region %in% subsetStates)
state <- map_data('state')
mi <- c('michigan')
regional <- subset(state, region %in% mi)
one <- unique(regional$region)
one
mi_df <- subset(state, region=="michigan")
mi_base <- ggplot(
data=mi_df, mapping = aes(x=long, y=lat, group=group))+
coord_fixed(1.3)+
geom_polygon(color="black", fill="gray")
mi_base
counties <- map_data("county")
mi_county <- subset(counties, region == "michigan")
mi_base +
geom_polygon(data=mi_county, fill=NA, color="white")+
geom_polygon(color="black",fill="NA")
URL<- "https://msu.edu/~brooksez/MIpop.txt"
popData <- read.csv(URL, stringsAsFactors = FALSE)
city <- map_data('city')
city <- maps('city')
map("world", "China")
map.cities(country = "China", capitals = 2)
# read the data from the web
autompg = read.table(
"http://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data",
quote = "\"",
comment.char = "",
stringsAsFactors = FALSE)
# give the dataframe headers
colnames(autompg) = c("mpg", "cyl", "disp", "hp", "wt", "acc", "year", "origin", "name")
# remove missing data, which is stored as "?"
autompg = subset(autompg, autompg$hp != "?")
# remove the plymouth reliant, as it causes some issues
autompg = subset(autompg, autompg$name != "plymouth reliant")
# give the dataset row names, based on the engine, year and name
rownames(autompg) = paste(autompg$cyl, "cylinder", autompg$year, autompg$name)
# remove the variable for name, as well as origin
autompg = subset(autompg, select = c("mpg", "cyl", "disp", "hp", "wt", "acc", "year"))
# change horsepower from character to numeric
autompg$hp = as.numeric(autompg$hp)
# check final structure of data
str(autompg)
write.csv(autompg, "data/autompg.csv")
write.csv(autompg, "data/autompg.csv")
library("plot3D")
x = autompg$wt
y = autompg$year
z = autompg$mpg
fit <- lm(z ~ x + y)
grid.lines = 25
x.pred     = seq(min(x), max(x), length.out = grid.lines)
y.pred     = seq(min(y), max(y), length.out = grid.lines)
xy         = expand.grid(x = x.pred, y = y.pred)
z.pred = matrix(predict(fit, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
fitpoints = predict(fit)
scatter3D(x, y, z, pch = 19, cex = 2, col = gg.col(1000), lighting = TRUE,
theta = 25, phi = 45, ticktype = "detailed",
xlab = "wt", ylab = "year", zlab = "mpg", zlim = c(0, 40), clim = c(0, 40),
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = NA, fit = fitpoints), main = "")
install.packages("plot3D")
library("plot3D")
x = autompg$wt
y = autompg$year
z = autompg$mpg
fit <- lm(z ~ x + y)
grid.lines = 25
x.pred     = seq(min(x), max(x), length.out = grid.lines)
y.pred     = seq(min(y), max(y), length.out = grid.lines)
xy         = expand.grid(x = x.pred, y = y.pred)
z.pred = matrix(predict(fit, newdata = xy),
nrow = grid.lines, ncol = grid.lines)
fitpoints = predict(fit)
scatter3D(x, y, z, pch = 19, cex = 2, col = gg.col(1000), lighting = TRUE,
theta = 25, phi = 45, ticktype = "detailed",
xlab = "wt", ylab = "year", zlab = "mpg", zlim = c(0, 40), clim = c(0, 40),
surf = list(x = x.pred, y = y.pred, z = z.pred,
facets = NA, fit = fitpoints), main = "")
mpg_model = lm(mpg ~ wt + year, data = autompg)
coef(mpg_model)
n = nrow(autompg)
p = length(coef(mpg_model))
X = cbind(rep(1, n), autompg$wt, autompg$year)
y = autompg$mpg
(beta_hat = solve(t(X) %*% X) %*% t(X) %*% y)
coef(mpg_model)
summary(mpg_model)$sigma
y_hat = X %*% solve(t(X) %*% X) %*% t(X) %*% y
e     = y - y_hat
sqrt(t(e) %*% e / (n - p))
sqrt(sum((y - y_hat) ^ 2) / (n - p))
summary(mpg_model)
summary(mpg_model)$coef
confint(mpg_model, level = 0.99)
library(scales)
new_cars = data.frame(wt = c(3500, 5000), year = c(76, 81))
new_cars
predict(mpg_model, newdata = new_cars, interval = "confidence", level = 0.99)
new_cars$wt
range(autompg$wt)
new_cars$year
range(autompg$year)
plot(year ~ wt, data = autompg, pch = 20, col = "dodgerblue", cex = 1.5)
points(new_cars, col = "darkorange", cex = 3, pch = "X")
x0 = c(1, 3500, 76)
x0 %*% beta_hat
beta_hat
x0 = c(0, 0, 1)
x0 %*% beta_hat
new_cars
predict(mpg_model, newdata = new_cars, interval = "prediction", level = 0.99)
summary(mpg_model)$r.squared
null_mpg_model = lm(mpg ~ 1, data = autompg)
full_mpg_model = lm(mpg ~ wt + year, data = autompg)
anova(null_mpg_model, full_mpg_model)
summary(mpg_model)
library(tidyverse)
ameslist <- read.table("https://msudataanalytics.github.io/SSC442/Labs/data/ames.csv",
header = TRUE,
sep = ",")
head(ameslist)
typeof(ameslist$ID)
typeof(ameslist$ExterQual)
mtcars <- mtcars
Ames <- Filter(is.numeric,ameslist)
head(Ames)
write.table(Ames,file="Ames.txt", sep="\t", row.names = TRUE, col.names = NA)
txt<- write.table(Ames,file="Ames.txt", sep="\t", row.names = TRUE, col.names = NA)
txt
write.table(Ames,file="~/Desktop/Ames.txt", sep="\t", row.names = TRUE, col.names = NA)
write.table(Ames,file="~/Desktop/SSC442-Lab/ssc442-group13-lab1/Ames.txt", sep="\t", row.names = TRUE, col.names = NA)
names(Ames)
length(Ames)
library(ggplot2)
scatterplot.matrix(~MSSubClass+LotFrontage|SalePrice, data=Ames, main="Three Cylinder Options")
scatter.matrix(~MSSubClass+LotFrontage|SalePrice, data=Ames, main="Three Cylinder Options")
pairs(~MSSubClass+LotFrontage|SalePrice, data=Ames, main="Three Cylinder Options")
pairs(~MSSubClass+LotFrontage, data=Ames)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
plot_data <- Ames[c(2,3,5,9,10,12,13,14,15,22,24,29),]
head(plot_data)
plot_data <- Ames[,c(2,3,5,9,10,12,13,14,15,22,24,29)]
head(plot_data)
plot_cor1 <- chart.Correlation(plot_data,histogram = TRUE, pch=19)
plot_cor1
cor_1 <- apply(Ames,2,function(col){cor(col,Ames$SalePrice)})
cor_1
cor_1 <- as.tibble(apply(Ames,2,function(col){cor(col,Ames$SalePrice)}))
cor_1
cor_1 <- apply(Ames,2,function(col){cor(col,Ames$SalePrice)})
as.tibble(cor_1)
data.matrix(cor_1)
names(data.matrix(cor_1))
cor_1 <- apply(plot_data,2,function(col){cor(col,Ames$SalePrice)})
data.matrix(cor_1)
names(cor_1)
dm <- data.matrix(cor_1)
names(dm)
names(dm) <- c("Variables", "Correlation")
dm
dm <- data.matrix(cor_1)
dm
new_dm <- rbind(c("Variables","Correlation"),dm)
setNames(dm,c("V","C"))
dim(dm)
plot_s <- ggplot(data=plot_data, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_abline(v=mean(Saleprice), col="green")
plot_s <- ggplot(data=plot_data, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_abline(v=mean(Ames$Saleprice), col="green")
Ames$SalePrice
mean(Ames$SalePrice)
plot_s <- ggplot(data=plot_data, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")
plot_s
plot_s <- ggplot(data=Ames, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")
plot_s
plot_s <- ggplot(data=Ames, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_smooth(method="lm",color="blue")
plot_s
plot_s <- ggplot(data=Ames, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_smooth(method="lm",color="blue", se=FALSE)
plot_s
plot_s <- ggplot(data=Ames, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_smooth(method="lm",color="blue", se=FALSE)+
geom_abline(v=mean(SalePrice))
plot_s
plot_s <- ggplot(data=Ames, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_smooth(method="lm",color="blue", se=FALSE)+
geom_abline(v=mean(Ames$SalePrice))
plot_s
plot_s <- ggplot(data=Ames, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_smooth(method="lm",color="blue", se=FALSE)+
abline(v=mean(Ames$SalePrice))
plot_s
plot_s <- ggplot(data=Ames, mapping=aes(x=SalePrice, y=GrLivArea))+
geom_point(color="salmon")+
geom_smooth(method="lm",color="blue", se=FALSE)+
abline(v=mean(Ames$SalePrice),col="green")
plot_s
reg_s <- lm(SalePrice ~ GrLivArea, data=Ames)
coeff = coefficients(reg_s)
eq_s = paste0("y = ", round(coeff[2],1), "*x ", round(coeff[1],1))
plot(Ames$GrLivArea, Ames$SalePrice)
plot(Ames$GrLivArea, Ames$SalePrice,main=eq_s)
plot(Ames$GrLivArea, Ames$SalePrice,main=eq_s, col="salmon")
plot(Ames$GrLivArea, Ames$SalePrice,main=eq_s, col="salmon",p)
plot(Ames$GrLivArea, Ames$SalePrice,main=eq_s, col="salmon","p")
plot(Ames$GrLivArea, Ames$SalePrice,main=eq_s, col="salmon","o")
plot(Ames$GrLivArea, Ames$SalePrice,main=eq_s, col="salmon","p")
abline(reg,col="green")
abline(reg_s,col="green")
abline(reg_s,col="green",size=3)
abline(reg_s,col="black")
names(Ames)
attach(Ames)
lm.fit = lm(SalePrice ~ LotArea)
lm.fit = lm(SalePrice ~ GarageArea)
simple.fit = lm(SalePrice ~ GarageArea)
summary(simple.fit)
multi.fit = lm(SalePrice ~ ID + MSSubClass)
summary(multi.fit)
attach(Ames)
multi.fit = lm(SalePrice ~ ID + MSSubClass)
summary(multi.fit)
multi.fit = lm(SalePrice ~ ID + MSSubClass,data=Ames)
head(Ames)
multi.fit = lm(SalePrice ~  MSSubClass,data=Ames)
multi.fit = lm(SalePrice ~  MSSubClass+ LotFrontage + LotArea,data=Ames)
multi.fit = lm(SalePrice ~  MSSubClass+ LotFrontage + LotArea + OverallQual + OverallCond
+ YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF
+ TotalBsmtSF + X1stFlrSF + X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath
+ BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd
+ Fireplaces + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF
+ MoSold + YrSold,data=Ames)
multi.fit = lm(SalePrice ~  ID+ MSSubClass+ LotFrontage + LotArea + OverallQual + OverallCond
+ YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF
+ TotalBsmtSF + X1stFlrSF + X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath
+ BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd
+ Fireplaces + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF
+ MoSold + YrSold,data=Ames)
multi.fit = lm(SalePrice ~   MSSubClass+ LotFrontage + LotArea + OverallQual + OverallCond
+ YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF
+ TotalBsmtSF + X1stFlrSF + X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath
+ BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd
+ Fireplaces + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF
+ MoSold + YrSold,data=Ames)
summary(multi.fit)
plot(dist ~ speed, data = cars,
xlab = "Speed (in Miles Per Hour)",
ylab = "Stopping Distance (in Feet)",
main = "Stopping Distance vs Speed",
pch  = 20,
cex  = 2,
col  = "grey")
overfit_model = lm(dist ~ poly(speed, 18), data = cars)
x = seq(-10, 50, length.out = 200)
plot(dist ~ speed, data = cars,
xlab = "Speed (in Miles Per Hour)",
ylab = "Stopping Distance (in Feet)",
main = "Stopping Distance vs Speed",
pch  = 20,
cex  = 2,
col  = "grey")
lines(x, predict(overfit_model, data.frame(speed = x)), lwd = 2, col = "darkorange")
confint(mpg_model, level = 0.99)
predict(mpg_model, newdata = new_cars, interval = "confidence", level = 0.99)
full_mpg_model = lm(mpg ~ wt + year, data = autompg)
anova(null_mpg_model, full_mpg_model)
plot(GarageArea, SalePrice)
plot(MSSubClass+ LotFrontage + LotArea + OverallQual + OverallCond
+ YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF
+ TotalBsmtSF + X1stFlrSF + X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath
+ BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd
+ Fireplaces + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF
+ MoSold + YrSold, SalePrice)
reg_m <- lm(SalePrice ~ MSSubClass+ LotFrontage + LotArea + OverallQual + OverallCond
+ YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF
+ TotalBsmtSF + X1stFlrSF + X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath
+ BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd
+ Fireplaces + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF
+ MoSold + YrSold, data=Ames)
coeff_m = coefficients(reg_m)
plot(MSSubClass+ LotFrontage + LotArea + OverallQual + OverallCond
+ YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF
+ TotalBsmtSF + X1stFlrSF + X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath
+ BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd
+ Fireplaces + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF
+ MoSold + YrSold, SalePrice, color="orange")
abline(reg_m, col="black")
plot(MSSubClass+ LotFrontage + LotArea + OverallQual + OverallCond
+ YearBuilt + YearRemodAdd + MasVnrArea + BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF
+ TotalBsmtSF + X1stFlrSF + X2ndFlrSF + LowQualFinSF + GrLivArea + BsmtFullBath
+ BsmtHalfBath + FullBath + HalfBath + BedroomAbvGr + KitchenAbvGr + TotRmsAbvGrd
+ Fireplaces + GarageYrBlt + GarageCars + GarageArea + WoodDeckSF + OpenPorchSF
+ MoSold + YrSold, SalePrice, col="orange")
abline(reg_m, col="black")
library(tidyverse)
setwd("~/Desktop/SSC442-Lab/ssc442-group13-lab1")
bank <- read_csv("bank.csv")
library(tidyverse)
bank <- read_csv("bank.csv")
bank_data <- Filter(is.numeric, bank)
head(bank_data)
reg_b <- lm(balance ~ age+day+duration+campaign+previous, data=bank_data)
coeff_b = coefficients(reg_b)
summary(reg_b)
plot(age+day+duration+campaign+previous, balance, data=bank_data)
add_column(bank_data, a=0, .before=1)
plot(age+day+duration+campaign+previous, balance, data=bank_data)
names(bank_data)
plot(age+day+duration+campaign+previous, balance, data=bank)
reg_b <- lm(balance ~ age+day+duration+campaign+previous, data=bank_data)
summary(reg_b)
plot(age+day+duration+campaign+previous, balance, data=bank)
plot(day+duration+campaign+previous, balance, data=bank)
plot(age+day+duration+campaign+previous, balance, data=bank_data)
library(tidyverse)
library(tidyverse)
